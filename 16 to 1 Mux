//Designing  the 16 to 1 Mux using 5 of $ to 1 Mux using Case statement



    
        module mux_4
        (
        input   d0, d1, d2, d3,
        input [1:0] sel,
        output reg y
        );
        
        always@*
        begin
        case(sel)
        2'b00:y=d0;
        2'b01:y=d1;
        2'b10:y=d2;
        2'b11:y=d3;
        endcase
        end
        
        endmodule
        
       
              
        
        module mux_16
        (
        input   d0, d1, d2, d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,
        input [3:0] sel,
        output y
        );
        
        wire y1,y2,y3,y4; 
        
      
        mux_4 mux0(.d0(d0), .d1(d1),.d2(d2), .d3(d3), .sel(sel[1:0]),.y(y1));
        mux_4 mux1(.d0(d4), .d1(d5),.d2(d6), .d3(d7), .sel(sel[1:0]),.y(y2));
        mux_4 mux2(.d0(d8), .d1(d9),.d2(d10), .d3(d11), .sel(sel[1:0]),.y(y3));
        mux_4 mux3(.d0(d12), .d1(d13),.d2(d14), .d3(d15), .sel(sel[1:0]),.y(y4));
        mux_4 mux4(.d0(y1), .d1(y2),.d2(y3), .d3(y4), .sel(sel[3:2]),.y(y)); 
        
               
        endmodule 
